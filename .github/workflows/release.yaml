name: Release
run-name: Releasing ${{ github.ref }}


permissions:
  contents: write


on:
  # Runs on a tag push
  push:
    tags:
      - v[0-9]+.*


concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false


env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1


jobs:
  prepare-release-version:
    name: Prepare release version

    runs-on: ubuntu-latest

    outputs:
      release_version: ${{ env.RELEASE_VERSION }}

    steps:
      - name: Checkout commit
        uses: actions/checkout@v3

      - name: Get release version
        run: |
          RELEASE_VERSION=$(git describe --tags --broken --dirty --match v* 2>/dev/null || true)
          [ -z "$RELEASE_VERSION" ] && \
            RELEASE_VERSION=0.0.0-$(git describe --tags --always --broken --dirty --match v*)
          RELEASE_VERSION=${RELEASE_VERSION##v}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" | tee -a "$GITHUB_ENV"


  build-and-test-binaries:
    name: Build and test binaries

    needs:
      - prepare-release-version

    uses: ./.github/workflows/build.yaml
    with:
      git_sha: ${{ github.sha }}
      release_version: ${{ needs.prepare-release-version.outputs.release_version }}


  create-release:
    name: Create release

    runs-on: ubuntu-latest

    needs:
      - build-and-test-binaries

    env:
      RELEASE_VERSION: ${{ needs.build-and-test-binaries.outputs.release_version }}

    outputs:
      release_version: ${{ env.RELEASE_VERSION }}

    steps:
      - name: Checkout current commit
        uses: actions/checkout@v3

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: /tmp/binaries

      - name: Prepare release changelog
        run: |
          git fetch --append --tags --unshallow --force
          tags=($(git tag --list --sort=v:refname | tail -n2))
          echo "RELEASE_CHANGELOG<<EOF" | tee -a "$GITHUB_ENV"
          git log --pretty=format:"- %s (%an)" "${tags[0]}".."${tags[1]}" | tee -a "$GITHUB_ENV"
          echo | tee -a "$GITHUB_ENV"
          echo "EOF" | tee -a "$GITHUB_ENV"

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: v${{ env.RELEASE_VERSION }}
          tag_name: test-v${{ env.RELEASE_VERSION }}
          files: /tmp/binaries/**/*
          fail_on_unmatched_files: true
          body: ${{ env.RELEASE_CHANGELOG }}


  publish-crate:
    name: Publish crate

    runs-on: ubuntu-latest

    needs:
      - create-release

    env:
      RELEASE_VERSION: ${{ needs.create-release.outputs.release_version }}

    outputs:
      release_version: ${{ env.RELEASE_VERSION }}

    steps:
      - name: Checkout commit
        uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: omni-build

      - name: Override Cargo.toml and Cargo.lock version
        run: |
          perl -i -pe 's/^version = "0\.0\.0-git"$/version = "${{ env.RELEASE_VERSION }}"/' Cargo.toml
          perl -i -pe 's/^version = "0\.0\.0-git"$/version = "${{ env.RELEASE_VERSION }}"/' Cargo.lock

      - name: Publish crate
        env:
          OMNI_RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
        run: |
          # We use --allow-dirty since we override the version key
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty --verbose

      - name: Reset Cargo.toml and Cargo.lock
        run: |
          git checkout Cargo.toml
          git checkout Cargo.lock


  update-brew:
    name: Trigger brew formula update

    runs-on: ubuntu-latest

    needs:
      - create-release

    steps:
      - name: Send repository dispatch with update-formulae event
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}
          repository: XaF/homebrew-omni
          event-type: update-formulae
