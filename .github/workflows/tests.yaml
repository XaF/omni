name: Run tests

on:
  push:
    branches:
      - main
      - dev
      - xaf/shadowenv
  pull_request:


concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true


jobs:
  build-matrix:
    name: Build test matrix
    runs-on: ubuntu-latest
    timeout-minutes: 2

    outputs:
      matrix: ${{ steps.build-matrix.outputs.matrix }}

    steps:
      - name: Checkout current commit
        uses: actions/checkout@v3

      - name: Check changed files for extra-OS verifications
        id: changed-install-files
        uses: tj-actions/changed-files@v35
        with:
          since_last_remote_commit: ${{ github.event_name != 'pull_request' }}
          files: |
            .github/workflows/tests.yaml
            install.sh

      - name: Build the matrix
        id: build-matrix
        run: |
          matrix='[{"os": "ubuntu-latest", "run-tests": true}]'
          if [[ "${{ steps.changed-install-files.outputs.any_modified }}" == "true" ]]; then
            matrix=$(echo "$matrix" | jq '. + [{"os": "ubuntu-latest", "container": "archlinux:base-devel"}]')
            matrix=$(echo "$matrix" | jq '. + [{"os": "ubuntu-latest", "container": "fedora:latest"}]')
            matrix=$(echo "$matrix" | jq '. + [{"os": "macos-latest", "install-timeout": 15}]')
          fi
          echo "matrix=$(echo "$matrix" | jq --compact-output)" | tee -a "$GITHUB_OUTPUT"


  install-script:
    name: Automated installation on ${{ matrix.container || matrix.os }}

    needs:
      - build-matrix

    strategy:
      matrix:
        include: ${{ fromJSON(needs.build-matrix.outputs.matrix) }}
      fail-fast: true
      max-parallel: 1

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    timeout-minutes: 20

    steps:
      - name: Install os/container dependencies
        run: |
          if command -v pacman >/dev/null; then
            yes | sudo pacman -Sy --noconfirm git
          elif command -v dnf >/dev/null; then
            sudo dnf -y install git procps-ng
          fi

      - name: Checkout current commit
        uses: actions/checkout@v3

      - name: Add trust to repository
        if: matrix.container != ''
        run: |
          git config --global --add safe.directory "$(pwd)"
          git remote set-url origin "https://github.com/XaF/omni.git"

      - name: Prepare environment
        run: |
          echo "OMNIDIR=$(pwd)" | tee -a "$GITHUB_ENV"
          echo "OMNI_GIT=${HOME}/git" | tee -a "$GITHUB_ENV"

      - name: Run install script
        timeout-minutes: ${{ matrix.install-timeout || 12 }}
        run: |
          ./install.sh \
            --no-interactive \
            --repo-path-format "%{host}/%{org}/%{repo}" \
            --bashrc "$HOME/omni.bashrc" \
            --zshrc "$HOME/omni.zshrc" \
            --fishrc "$HOME/omni.fishrc"

      - name: Check the content of the generated bashrc
        run: |
          cat "$HOME/omni.bashrc"

      - name: Check the content of the generated zshrc
        run: |
          cat "$HOME/omni.zshrc"

      - name: Check the content of the generated fishrc
        run: |
          cat "$HOME/omni.fishrc"

      - name: Try and run omni with bash
        shell: bash
        run: |
          source "$HOME/omni.bashrc"

          echo "## Running 'status' from git directory"; echo
          omni status

          echo; echo "## Running 'status' from root directory"; echo
          cd /
          omni status

          echo; echo "## Running 'help' from root directory"; echo
          omni help

      - name: Install zsh
        run: |
          if ! command -v zsh >/dev/null; then
            if command -v apt-get >/dev/null; then
              sudo apt-get --yes install zsh
            elif command -v pacman >/dev/null; then
              yes | sudo pacman -Sy --noconfirm zsh
            elif command -v dnf >/dev/null; then
              sudo dnf -y install zsh
            fi
          fi

      - name: Try and run omni with zsh
        shell: zsh {0}
        run: |
          source "$HOME/omni.zshrc"

          echo "## Running 'status' from git directory"; echo
          omni status

          echo; echo "## Running 'status' from root directory"; echo
          cd /
          omni status

          echo; echo "## Running 'help' from root directory"; echo
          omni help

      - name: Install fish
        run: |
          if ! command -v fish >/dev/null; then
            if command -v brew >/dev/null; then
              brew install fish
            elif command -v apt-get >/dev/null; then
              sudo apt-get --yes install fish
            elif command -v pacman >/dev/null; then
              yes | sudo pacman -Sy --noconfirm fish
            elif command -v dnf >/dev/null; then
              sudo dnf -y install fish
            fi
          fi

      - name: Try and run omni with fish
        shell: fish {0}
        run: |
          source "$HOME/omni.fishrc"

          echo "## Running 'status' from git directory"; echo
          omni status

          echo; echo "## Running 'status' from root directory"; echo
          cd /
          omni status

          echo; echo "## Running 'help' from root directory"; echo
          omni help

      - name: Setup bats
        if: matrix.run-tests == true
        run: |
          bats_dir="${TMPDIR:-/tmp}/bats-core"
          git clone https://github.com/bats-core/bats-core.git "${bats_dir}"
          cd "${bats_dir}"
          ./install.sh "${HOME}/.local"

      - name: Evaluate expected test duration
        if: matrix.run-tests == true
        run: |
          NUM_TESTS=$(bats -c tests/)
          # This gives about 30s per test declared in bats, which should be sufficient,
          # might need to adapt as we grow the number of tests, if we see timeout failures
          echo "TEST_TIMEOUT_MINUTES=$(((${NUM_TESTS} + 1) / 2))" | tee -a "$GITHUB_ENV"

      - name: Run bats tests
        if: matrix.run-tests == true
        timeout-minutes: ${{ fromJSON(env.TEST_TIMEOUT_MINUTES) }}
        run: |
          bats --no-tempdir-cleanup tests/
