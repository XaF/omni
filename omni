#!/usr/bin/env ruby
#
# Main omni command, which is used to run the other commands
# and provide autocompletion for them

require 'colorize'

require_relative 'lib/omnipath'


# complete_omni_subcommand is a function that will be called
# when the --complete flag is passed to omni. It will provide
# autocompletion for the subcommands
def complete_omni_subcommand(argv)
  commands = OmniPath.each.to_a

  # Check if we have the COMP_CWORD variable, which means
  # that we can know where the matching needs to happen
  comp_cword = ENV['COMP_CWORD'].to_i - 1

  # Prepare until which word we need to match
  match_pos = if comp_cword >= 0
    comp_cword
  else
    argv.length - 1
  end

  # If we have full subcommands in the argv, we only want to
  # show the subcommands that match what's already provided
  commands.select! do |omniCmd|
    omniCmd.cmd[0..match_pos - 1] == argv[0..match_pos - 1]
  end if match_pos > 0

  # For the last value in argv, we need to use more of a
  # matching with the start of the command
  commands.select! do |omniCmd|
    omniCmd.cmd[match_pos].start_with?(argv[match_pos])
  end if argv.length > match_pos

  if commands.length == 1 && commands[0].cmd.length <= match_pos
    omniCmd = commands[0]

    # If we get there, let's try and delegate calling --complete
    # to the underlying function in case it provides more
    # autocompletion...

    # Open the file and check the headers to see if it supports
    # autocompletion
    if omniCmd.autocompletion?
      # Set the environment variables that we need to pass to the
      # subcommand
      ENV['OMNI_SUBCOMMAND'] = omniCmd.cmd.join(' ')
      ENV['COMP_CWORD'] = (comp_cword - omniCmd.cmd.length + 1).to_s

      # We need to shift the argv to remove the subcommand
      # that we are autocompleting
      passed_argv = argv.dup
      passed_argv.shift(omniCmd.cmd.length)

      # Call the subcommand with the --complete flag, we delegate
      # the answer to it
      omniCmd.autocomplete(*passed_argv)
    end
  end

  # Extract the values at the expected position
  commands.map! { |omniCmd| omniCmd.cmd[match_pos] }
  commands.compact!
  commands.uniq!
  commands.sort!

  # Print the commands, one per line
  commands.each do |cmd|
    puts cmd
  end

  exit 0
end


# run_omni_subcommand is a function that will be called
# to run the subcommand that was passed to omni
def run_omni_subcommand(argv)
  omniCmd = OmniPath.find { |omniCmd| omniCmd.serves?(argv) }
  omniCmd.exec(*argv) unless omniCmd.nil?

  # If we got here, it means that we didn't find the command
  # in any of the directories, so print an error message
  # and return an error code
  STDERR.puts "#{"omni:".light_cyan} #{"command not found:".red} #{ARGV.join(' ')}"

  # Check if we have a command that starts with the same
  # characters, and if so, print it as a suggestion
  omniCmd = OmniPath.find { |omniCmd| omniCmd.start_with?(argv) }
  STDERR.puts "#{"omni:".light_cyan} Did you mean? #{omniCmd.cmd_s.yellow}" unless omniCmd.nil?

  # Return an error code since we didn't find the command
  # to execute
  exit 1
end


# If the --complete flag is passed, we want to provide
# autocompletion for the subcommands
if ARGV.length > 0 && ARGV[0] == '--complete'
  argv = ARGV.dup
  argv.shift(1)
  complete_omni_subcommand(argv)
end


# Otherwise, we want to run the subcommand
run_omni_subcommand(ARGV.dup)
