#!/usr/bin/env ruby
#
# category: Git commands
# help: Clone the specified repository
# help:
# help: \033[1m\e[3mUsage\e[0m\033[1m: omni clone \e[36m<repo>\e[0m
# help:
# help:   \e[36mrepo\e[0m      The repository to clone; this can be in
# help:             format <org>/<repo>, just <repo>, or the full URL.
# help:             If the case where only the repo name is specified,
# help:             \e[3mOMNI_ORG\e[0m will be used to search for the
# help:             repository to clone.

require 'colorize'

require_relative '../lib/env'
require_relative '../lib/git'
require_relative '../lib/utils'

error('no repository specified') unless ARGV[0]

repositories = [ARGV[0]]

address = repo_address?(repositories.first)
unless address
  if repositories.first.include?('/')
    repositories = ["${OMNI_ORG}/#{repositories.first}"]
  else
    error("#{repositories.first.yellow}: unable to resolve repository (OMNI_ORG is not defined)") \
      unless OmniEnv::OMNI_ORG

    repositories = OmniEnv::OMNI_ORG.split(':').map(&:strip).map do |org|
      "#{OmniEnv::OMNI_GIT_HOST}#{org}/#{repositories.first}.git"
    end
  end
end

repositories.each do |repo|
  # Try to parse the repository as a URI
  address = repo_address?(repo)
  next unless address

  # Check using git ls-remote if the repository exists
  git_ls_remote = system('git', 'ls-remote', repo, '>/dev/null', '2>&1')
  next unless git_ls_remote

  # Compute the path that we will use for the repository
  path = "#{address.host}#{address.path.sub(/\.git$/, '')}"
  full_path = "#{OmniEnv::OMNI_GIT}/#{path}"

  error("#{repo.yellow}: repository already exists") if File.directory?(full_path)

  # Execute git command line from ruby
  git_clone = system('git', 'clone', repo, full_path)
  error("#{repo.yellow}: git clone failed") unless git_clone

  # Shell escape full_path using ruby lib
  omni_cmd(['cd', full_path])

  exit 0
end

error("#{repo.yellow}: unable to resolve repository")
